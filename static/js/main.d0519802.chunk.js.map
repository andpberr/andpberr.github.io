{"version":3,"sources":["logo.svg","Components/Header.js","Components/Footer.js","Components/Contents/Home.js","Components/Contents/Contact.js","Components/Contents/Projects.js","Components/MainContent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","id","onClick","homeClick","projClick","resuClick","contClick","Footer","href","src","logo","alt","Home","React","Component","Contact","Project","MainContent","this","view","Projects","App","state","page","setState","console","log","window","open","homeClickHandler","bind","projClickHandler","contClickHandler","resuClickHandler","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,kC,kMCgC5BC,MA9Bf,SAAgBC,GACd,OACE,yBAAKC,UAAU,cACT,yBAAKC,GAAG,UAAUD,UAAU,UAAUE,QAASH,EAAMI,WACnD,4BAAQH,UAAU,WAAlB,kBAKF,yBAAKC,GAAG,UAAUD,UAAU,UAAUE,QAASH,EAAMK,WACnD,4BAAQJ,UAAU,WAAlB,aAKF,yBAAKC,GAAG,UAAUD,UAAU,UAAUE,QAASH,EAAMM,WACnD,4BAAQL,UAAU,WAAlB,WAKF,yBAAKC,GAAG,UAAUD,UAAU,UAAUE,QAASH,EAAMO,WACnD,4BAAQN,UAAU,WAAlB,c,gBCVGO,MAXf,WACI,OACE,4BAAQP,UAAU,cAChB,uBAAGA,UAAU,UAAUQ,KAAK,2BAC1B,yBAAKC,IAAKC,IAAMV,UAAU,WAAWW,IAAI,SAD3C,qBCKOC,E,iLANP,OACI,+D,GAJOC,IAAMC,WCSVC,E,iLANP,OACI,kE,GAJUF,IAAMC,WCSbE,E,iLANP,OACI,mE,GAJUH,IAAMC,WCgBbG,E,iLAXP,OAAQC,KAAKnB,MAAMoB,MACf,IAAK,WACD,OAAO,kBAACC,EAAD,MACX,IAAK,UACD,OAAO,kBAAC,EAAD,MACX,QACI,OAAO,kBAAC,EAAD,W,GARGP,IAAMC,WCmDjBO,E,YAjDb,WAAYtB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDuB,MAAQ,CACXC,KAAM,QAJS,E,gFASjBL,KAAKM,SAAS,CACZD,KAAM,W,yCAKRL,KAAKM,SAAS,CACZD,KAAM,e,yCAKRE,QAAQC,IAAI,SACZR,KAAKM,SAAS,CACZD,KAAM,c,yCAKRI,OAAOC,KAAK,mC,+BAIZ,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,CACEG,UAAWe,KAAKW,iBAAiBC,KAAKZ,MACtCd,UAAWc,KAAKa,iBAAiBD,KAAKZ,MACtCZ,UAAWY,KAAKc,iBAAiBF,KAAKZ,MACtCb,UAAWa,KAAKe,iBAAiBH,KAAKZ,QAGxC,kBAAC,EAAD,CAAaC,KAAMD,KAAKI,MAAMC,OAC9B,kBAAC,EAAD,W,GA3CUV,IAAMC,WCMJoB,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.d0519802.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <nav className=\"App-header\">\r\n          <div id=\"btnHome\" className=\"navlink\" onClick={props.homeClick}>\r\n            <button className=\"navlink\">\r\n              Andrew's Site\r\n            </button>\r\n          </div>\r\n\r\n          <div id=\"btnProj\" className=\"navlink\" onClick={props.projClick}>\r\n            <button className=\"navlink\">\r\n              Projects\r\n            </button>\r\n          </div>\r\n\r\n          <div id=\"btnResu\" className=\"navlink\" onClick={props.resuClick}>\r\n            <button className=\"navlink\">\r\n              Resume\r\n            </button>\r\n          </div>\r\n\r\n          <div id=\"btnCont\" className=\"navlink\" onClick={props.contClick}>\r\n            <button className=\"navlink\">\r\n              Contact\r\n            </button>\r\n          </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport logo from '../logo.svg';\r\n\r\nfunction Footer() {\r\n    return (\r\n      <footer className=\"App-footer\">\r\n        <a className=\"navlink\" href=\"https://www.reactjs.org\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          Made with React\r\n        </a>\r\n      </footer>\r\n      );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nclass Home extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>TODO put home content here</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nclass Contact extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>TODO put contact content here</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;\r\n","import React from 'react';\r\n\r\nclass Project extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>TODO put projects content here</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Project;","import React from 'react';\r\nimport Home from './Contents/Home.js';\r\nimport Contact from './Contents/Contact.js';\r\nimport Projects from './Contents/Projects.js';\r\n\r\nclass MainContent extends React.Component {\r\n    render () {\r\n        switch (this.props.view) {\r\n            case \"projects\":\r\n                return <Projects />;\r\n            case \"contact\":\r\n                return <Contact />;\r\n            default:\r\n                return <Home />;\r\n        }\r\n    }\r\n}\r\n\r\nexport default MainContent;","import React from 'react';\nimport './App.scss';\nimport Header from './Components/Header';\nimport Footer from './Components/Footer';\nimport MainContent from './Components/MainContent';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      page: 'home',\n    };\n  }\n\n  homeClickHandler() {\n    this.setState({\n      page: 'home'\n    });\n  }\n\n  projClickHandler() {\n    this.setState({\n      page: 'projects'\n    });\n  }\n\n  contClickHandler() {\n    console.log(\"hokay\");\n    this.setState({\n      page: 'contact'\n    });\n  }\n\n  resuClickHandler() {\n    window.open(\"../resources/Resume_Berry.pdf\");\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <Header \n          homeClick={this.homeClickHandler.bind(this)}\n          projClick={this.projClickHandler.bind(this)}\n          contClick={this.contClickHandler.bind(this)}\n          resuClick={this.resuClickHandler.bind(this)}\n        \n        />\n        <MainContent view={this.state.page} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}